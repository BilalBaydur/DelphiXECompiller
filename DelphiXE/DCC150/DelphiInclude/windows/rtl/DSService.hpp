// CodeGear C++Builder
// Copyright (c) 1995, 2010 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'DSService.pas' rev: 22.00

#ifndef DsserviceHPP
#define DsserviceHPP

#pragma delphiheader begin
#pragma option push
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member functions
#pragma pack(push,8)
#include <System.hpp>	// Pascal unit
#include <SysInit.hpp>	// Pascal unit
#include <SysUtils.hpp>	// Pascal unit
#include <Classes.hpp>	// Pascal unit
#include <SqlExpr.hpp>	// Pascal unit
#include <DBXCommon.hpp>	// Pascal unit
#include <DBXJSON.hpp>	// Pascal unit
#include <DbxDatasnap.hpp>	// Pascal unit
#include <DbxSocketChannelNative.hpp>	// Pascal unit
#include <DBXPlatform.hpp>	// Pascal unit
#include <DBXTransport.hpp>	// Pascal unit
#include <DSTransport.hpp>	// Pascal unit
#include <DBXTransportFilter.hpp>	// Pascal unit
#include <DBXMessageHandlerCommon.hpp>	// Pascal unit
#include <DSAuth.hpp>	// Pascal unit
#include <Windows.hpp>	// Pascal unit
#include <Generics.Collections.hpp>	// Pascal unit
#include <DSCommonProxy.hpp>	// Pascal unit
#include <SyncObjs.hpp>	// Pascal unit
#include <DSCommonServer.hpp>	// Pascal unit
#include <Generics.Defaults.hpp>	// Pascal unit

//-- user supplied -----------------------------------------------------------

namespace Dsservice
{
//-- type declarations -------------------------------------------------------
typedef System::Set<System::ShortInt, 0, 64>  TParamRange;

template<typename T> class DELPHICLASS TDSRequestFilter__1;
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TDSRequestFilter__1 : public System::TObject
{
	typedef System::TObject inherited;
	
private:
	System::UnicodeString FName;
	TParamRange FRange;
	bool FOnResult;
	System::UnicodeString FTypeName;
	
protected:
	__fastcall virtual TDSRequestFilter__1(const System::UnicodeString TypeName);
	
public:
	__fastcall virtual ~TDSRequestFilter__1(void);
	virtual bool __fastcall SetParameterValue(System::UnicodeString ParamName, System::UnicodeString ParamValue);
	virtual bool __fastcall HasParameter(const System::UnicodeString ParamName);
	virtual bool __fastcall CanConvert(T Value) = 0 ;
	virtual Dbxjson::TJSONValue* __fastcall ToJSON(T Value, bool IsLocal) = 0 ;
	__property System::UnicodeString Name = {read=FName, write=FName};
	__property System::UnicodeString TypeName = {read=FTypeName};
	__property TParamRange Range = {read=FRange, write=FRange};
	__property bool OnResult = {read=FOnResult, write=FOnResult, nodefault};
};


class DELPHICLASS TDBXRequestFilter;
class PASCALIMPLEMENTATION TDBXRequestFilter : public TDSRequestFilter__1<Dbxcommon::TDBXValue*>
{
	typedef TDSRequestFilter__1<Dbxcommon::TDBXValue*> inherited;
	
public:
	virtual TDBXRequestFilter* __fastcall Clone(void) = 0 ;
protected:
	/* {DSService}TDSRequestFilter<DBXCommon_TDBXValue>.Create */ inline __fastcall virtual TDBXRequestFilter(const System::UnicodeString TypeName) : TDSRequestFilter__1<Dbxcommon::TDBXValue*>(TypeName) { }
	
public:
	/* {DSService}TDSRequestFilter<DBXCommon_TDBXValue>.Destroy */ inline __fastcall virtual ~TDBXRequestFilter(void) { }
	
};


class DELPHICLASS TDBXCropRequestFilter;
class PASCALIMPLEMENTATION TDBXCropRequestFilter : public TDBXRequestFilter
{
	typedef TDBXRequestFilter inherited;
	
private:
	int FOff;
	int FCount;
	
protected:
	__fastcall TDBXCropRequestFilter(const System::UnicodeString TypeName, int Off, int Count)/* overload */;
	__property int Off = {read=FOff, nodefault};
	__property int Count = {read=FCount, nodefault};
	
public:
	__fastcall virtual TDBXCropRequestFilter(const System::UnicodeString TypeName)/* overload */;
	__fastcall virtual ~TDBXCropRequestFilter(void);
	virtual bool __fastcall SetParameterValue(System::UnicodeString ParamName, System::UnicodeString ParamValue);
	virtual bool __fastcall HasParameter(const System::UnicodeString ParamName);
};


class DELPHICLASS TDBXSubStringRequestFilter;
class PASCALIMPLEMENTATION TDBXSubStringRequestFilter : public TDBXCropRequestFilter
{
	typedef TDBXCropRequestFilter inherited;
	
public:
	virtual bool __fastcall CanConvert(Dbxcommon::TDBXValue* Value);
	virtual Dbxjson::TJSONValue* __fastcall ToJSON(Dbxcommon::TDBXValue* Value, bool IsLocal = false);
	virtual TDBXRequestFilter* __fastcall Clone(void);
protected:
	/* TDBXCropRequestFilter.Create */ inline __fastcall TDBXSubStringRequestFilter(const System::UnicodeString TypeName, int Off, int Count)/* overload */ : TDBXCropRequestFilter(TypeName, Off, Count) { }
	
public:
	/* TDBXCropRequestFilter.Destroy */ inline __fastcall virtual ~TDBXSubStringRequestFilter(void) { }
	
};


class DELPHICLASS TDBXReaderRequestFilter;
class PASCALIMPLEMENTATION TDBXReaderRequestFilter : public TDBXCropRequestFilter
{
	typedef TDBXCropRequestFilter inherited;
	
public:
	virtual bool __fastcall CanConvert(Dbxcommon::TDBXValue* Value);
	virtual Dbxjson::TJSONValue* __fastcall ToJSON(Dbxcommon::TDBXValue* Value, bool IsLocal = false);
	virtual TDBXRequestFilter* __fastcall Clone(void);
protected:
	/* TDBXCropRequestFilter.Create */ inline __fastcall TDBXReaderRequestFilter(const System::UnicodeString TypeName, int Off, int Count)/* overload */ : TDBXCropRequestFilter(TypeName, Off, Count) { }
	
public:
	/* TDBXCropRequestFilter.Destroy */ inline __fastcall virtual ~TDBXReaderRequestFilter(void) { }
	
};


class DELPHICLASS TDBXRequestFilterFactory;
typedef Generics_collections::TObjectDictionary__2<System::UnicodeString,TDBXRequestFilter*>* TDBXRequestFilterDictionary;

class PASCALIMPLEMENTATION TDBXRequestFilterFactory : public System::TObject
{
	typedef System::TObject inherited;
	
private:
	static TDBXRequestFilterFactory* FInstance;
	
private:
	Generics_collections::TObjectDictionary__2<System::UnicodeString,TDBXRequestFilter*>* FRepo;
	__classmethod void __fastcall SetUp();
	__classmethod void __fastcall CleanUp();
	
public:
	__fastcall TDBXRequestFilterFactory(void);
	__fastcall virtual ~TDBXRequestFilterFactory(void);
	void __fastcall RegisterRequestFilter(TDBXRequestFilter* Converter);
	TDBXRequestFilter* __fastcall RequestFilter(System::UnicodeString Name);
	void __fastcall GetAllWithField(System::UnicodeString FieldName, Generics_collections::TObjectList__1<TDBXRequestFilter*>* List);
	/* static */ __property TDBXRequestFilterFactory* Instance = {read=FInstance};
};


typedef void __fastcall (__closure *TDSMethodMapEvent)(System::TObject* Sender, const System::UnicodeString ClassCtx, const System::UnicodeString MethodCtx, /* out */ System::UnicodeString &DSMethodName);

class DELPHICLASS TDSServiceException;
class PASCALIMPLEMENTATION TDSServiceException : public Sysutils::Exception
{
	typedef Sysutils::Exception inherited;
	
public:
	/* Exception.Create */ inline __fastcall TDSServiceException(const System::UnicodeString Msg) : Sysutils::Exception(Msg) { }
	/* Exception.CreateFmt */ inline __fastcall TDSServiceException(const System::UnicodeString Msg, System::TVarRec const *Args, const int Args_Size) : Sysutils::Exception(Msg, Args, Args_Size) { }
	/* Exception.CreateRes */ inline __fastcall TDSServiceException(int Ident)/* overload */ : Sysutils::Exception(Ident) { }
	/* Exception.CreateResFmt */ inline __fastcall TDSServiceException(int Ident, System::TVarRec const *Args, const int Args_Size)/* overload */ : Sysutils::Exception(Ident, Args, Args_Size) { }
	/* Exception.CreateHelp */ inline __fastcall TDSServiceException(const System::UnicodeString Msg, int AHelpContext) : Sysutils::Exception(Msg, AHelpContext) { }
	/* Exception.CreateFmtHelp */ inline __fastcall TDSServiceException(const System::UnicodeString Msg, System::TVarRec const *Args, const int Args_Size, int AHelpContext) : Sysutils::Exception(Msg, Args, Args_Size, AHelpContext) { }
	/* Exception.CreateResHelp */ inline __fastcall TDSServiceException(int Ident, int AHelpContext)/* overload */ : Sysutils::Exception(Ident, AHelpContext) { }
	/* Exception.CreateResFmtHelp */ inline __fastcall TDSServiceException(System::PResStringRec ResStringRec, System::TVarRec const *Args, const int Args_Size, int AHelpContext)/* overload */ : Sysutils::Exception(ResStringRec, Args, Args_Size, AHelpContext) { }
	/* Exception.Destroy */ inline __fastcall virtual ~TDSServiceException(void) { }
	
};


class DELPHICLASS TDSRequestFilterManager;
class PASCALIMPLEMENTATION TDSRequestFilterManager : public System::TObject
{
	typedef System::TObject inherited;
	
protected:
	Generics_collections::TObjectDictionary__2<System::UnicodeString,TDBXRequestFilter*>* FRequestFilterStore;
	bool FStreamAsJSON;
	__classmethod void __fastcall ParseParamName(const System::UnicodeString PName, /* out */ System::UnicodeString &DCName, /* out */ System::UnicodeString &DCType, /* out */ System::UnicodeString &FieldName, /* out */ TParamRange &Range, /* out */ bool &OnResult);
	
public:
	__fastcall virtual TDSRequestFilterManager(void);
	__fastcall virtual ~TDSRequestFilterManager(void);
	bool __fastcall ProcessQueryParameter(const System::UnicodeString ParamName, const System::UnicodeString ParamValue);
	void __fastcall FiltersForCriteria(const System::UnicodeString TypeName, const TParamRange &Range, const bool OnResult, /* out */ Generics_collections::TObjectList__1<TDBXRequestFilter*>* &List)/* overload */;
	void __fastcall FiltersForCriteria(const TParamRange &Range, const bool OnResult, /* out */ Generics_collections::TObjectList__1<TDBXRequestFilter*>* &List)/* overload */;
	bool __fastcall CheckConvertersForConsistency(void);
};


class DELPHICLASS TDSService;
class PASCALIMPLEMENTATION TDSService : public TDSRequestFilterManager
{
	typedef TDSRequestFilterManager inherited;
	
private:
	Dbxdatasnap::TDBXDatasnapProperties* FDBXProperties;
	bool FLocalConnection;
	
protected:
	virtual void __fastcall ProcessRequest(const Dbxjson::TJSONArray* Request, Dbxcommon::TRequestCommandHandler* ResponseHandler);
	void __fastcall Execute(const Dbxjson::TJSONObject* Request, Dbxcommon::TRequestCommandHandler* ResponseHandler);
	
public:
	__fastcall virtual TDSService(System::UnicodeString DSServerName, System::UnicodeString DSHostname, int DSPort, System::UnicodeString AuthUser, System::UnicodeString AuthPassword);
	__fastcall virtual ~TDSService(void);
	virtual void __fastcall ProcessGETRequest(const System::UnicodeString Request, Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, TDSMethodMapEvent MapMethod, Dbxcommon::TRequestCommandHandler* ResponseHandler) = 0 ;
	virtual void __fastcall ProcessPUTRequest(const System::UnicodeString Request, Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, TDSMethodMapEvent MapMethod, Dbxcommon::TRequestCommandHandler* ResponseHandler) = 0 ;
	virtual void __fastcall ProcessPOSTRequest(const System::UnicodeString Request, Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, TDSMethodMapEvent MapMethod, Dbxcommon::TRequestCommandHandler* ResponseHandler) = 0 ;
	virtual void __fastcall ProcessDELETERequest(const System::UnicodeString Request, Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, TDSMethodMapEvent MapMethod, Dbxcommon::TRequestCommandHandler* ResponseHandler) = 0 ;
	__property bool LocalConnection = {read=FLocalConnection, nodefault};
	__property bool StreamAsJSON = {read=FStreamAsJSON, write=FStreamAsJSON, nodefault};
};


class DELPHICLASS TDSRESTService;
class PASCALIMPLEMENTATION TDSRESTService : public TDSService
{
	typedef TDSService inherited;
	
private:
	void __fastcall ParseRequest(const System::UnicodeString Request, System::UnicodeString &ClassName, System::UnicodeString &MethodName, Classes::TStringList* &ParamValues);
	void __fastcall BuildParamArray(const Classes::TStringList* Params, Dbxjson::TJSONArray* &ParamArray);
	void __fastcall ProcessREST(const TDSMethodMapEvent MapMethod, const System::UnicodeString RestRequest, const System::DynamicArray<System::Byte> Content, Dbxcommon::TRequestCommandHandler* ResponseHandler);
	
protected:
	__classmethod void __fastcall DefaultMethodNameMapGETRESTEvent(System::TObject* Sender, const System::UnicodeString ClassCtx, const System::UnicodeString MethodCtx, /* out */ System::UnicodeString &DSMethodName);
	__classmethod void __fastcall DefaultMethodNameMapPUTRESTEvent(System::TObject* Sender, const System::UnicodeString ClassCtx, const System::UnicodeString MethodCtx, /* out */ System::UnicodeString &DSMethodName);
	__classmethod void __fastcall DefaultMethodNameMapPOSTRESTEvent(System::TObject* Sender, const System::UnicodeString ClassCtx, const System::UnicodeString MethodCtx, /* out */ System::UnicodeString &DSMethodName);
	__classmethod void __fastcall DefaultMethodNameMapDELETERESTEvent(System::TObject* Sender, const System::UnicodeString ClassCtx, const System::UnicodeString MethodCtx, /* out */ System::UnicodeString &DSMethodName);
	__classmethod void __fastcall DefaultMethodNameMapRESTEvent(const System::UnicodeString ClassCtx, const System::UnicodeString MethodCtx, const System::UnicodeString Prefix, /* out */ System::UnicodeString &DSMethodName);
	
public:
	__fastcall virtual TDSRESTService(System::UnicodeString dsServerName, System::UnicodeString dsHostname, int dsPort, System::UnicodeString AuthUser, System::UnicodeString AuthPassword);
	__fastcall virtual ~TDSRESTService(void);
	virtual void __fastcall ProcessGETRequest(const System::UnicodeString Request, Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, TDSMethodMapEvent MapMethod, Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessPUTRequest(const System::UnicodeString Request, Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, TDSMethodMapEvent MapMethod, Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessPOSTRequest(const System::UnicodeString Request, Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, TDSMethodMapEvent MapMethod, Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessDELETERequest(const System::UnicodeString Request, Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, TDSMethodMapEvent MapMethod, Dbxcommon::TRequestCommandHandler* ResponseHandler);
};


class DELPHICLASS TDSJSONService;
class PASCALIMPLEMENTATION TDSJSONService : public TDSService
{
	typedef TDSService inherited;
	
protected:
	void __fastcall ProcessJSONCommand(System::DynamicArray<System::Byte> Content, Dbxcommon::TRequestCommandHandler* ResponseHandler);
	
public:
	__fastcall virtual TDSJSONService(System::UnicodeString dsServerName, System::UnicodeString dsHostname, int dsPort, System::UnicodeString AuthUser, System::UnicodeString AuthPassword);
	__fastcall virtual ~TDSJSONService(void);
	virtual void __fastcall ProcessGETRequest(const System::UnicodeString Request, Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, TDSMethodMapEvent MapMethod, Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessPUTRequest(const System::UnicodeString Request, Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, TDSMethodMapEvent MapMethod, Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessPOSTRequest(const System::UnicodeString Request, Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, TDSMethodMapEvent MapMethod, Dbxcommon::TRequestCommandHandler* ResponseHandler);
	virtual void __fastcall ProcessDELETERequest(const System::UnicodeString Request, Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, TDSMethodMapEvent MapMethod, Dbxcommon::TRequestCommandHandler* ResponseHandler);
};


typedef Generics_collections::TList__1<int>* TDSSessionCacheKeys;

class DELPHICLASS TDSSessionCache;
class PASCALIMPLEMENTATION TDSSessionCache : public System::TObject
{
	typedef System::TObject inherited;
	
private:
	Generics_collections::TDictionary__2<int,Dbxcommon::TResultCommandHandler*>* FItems;
	
public:
	__fastcall TDSSessionCache(void);
	__fastcall virtual ~TDSSessionCache(void);
	int __fastcall AddItem(Dbxcommon::TResultCommandHandler* Item);
	void __fastcall RemoveItem(Dbxcommon::TResultCommandHandler* Item)/* overload */;
	Dbxcommon::TResultCommandHandler* __fastcall RemoveItem(int ID, bool InstanceOwner = true)/* overload */;
	Dbxcommon::TResultCommandHandler* __fastcall GetItem(int ID);
	int __fastcall GetItemID(Dbxcommon::TResultCommandHandler* Item);
	Generics_collections::TList__1<int>* __fastcall GetItemIDs(void);
	void __fastcall ClearAllItems(bool InstanceOwner = true);
};


#pragma option push -b-
enum TDSSessionStatus { Active, Closed, Idle, Terminated, Connected, Expired };
#pragma option pop

class DELPHICLASS TDSSession;
class PASCALIMPLEMENTATION TDSSession : public System::TObject
{
	typedef System::TObject inherited;
	
private:
	System::TDateTime FStartDateTime;
	int FDuration;
	TDSSessionStatus FStatus;
	unsigned FLastActivity;
	System::UnicodeString FUserName;
	System::UnicodeString FSessionName;
	Generics_collections::TDictionary__2<System::UnicodeString,System::UnicodeString>* FMetaData;
	Classes::TStrings* FUserRoles;
	TDSSessionCache* FCache;
	System::TObject* FLastResultStream;
	System::TObject* FCreator;
	void __fastcall SetSessionName(const System::UnicodeString sessionId);
	void __fastcall SetUserName(const System::UnicodeString userName);
	
protected:
	int __fastcall GetId(void);
	virtual void __fastcall TerminateSession(void);
	virtual void __fastcall TerminateInactiveSession(void);
	bool __fastcall IsIdle(unsigned Seconds);
	bool __fastcall IsIdleMS(unsigned Miliseconds);
	virtual TDSSessionStatus __fastcall GetSessionStatus(void);
	void __fastcall GetAuthRoleInternal(Dscommonserver::TDSServerMethod* ServerMethod, Dsauth::TDSCustomAuthenticationManager* AuthManager, /* out */ Classes::TStrings* &AuthorizedRoles, /* out */ Classes::TStrings* &DeniedRoles);
	
public:
	__fastcall virtual TDSSession(void)/* overload */;
	__fastcall virtual TDSSession(const System::UnicodeString SessionName)/* overload */;
	__fastcall virtual TDSSession(const System::UnicodeString SessionName, const System::UnicodeString AUser)/* overload */;
	__fastcall virtual ~TDSSession(void);
	void __fastcall MarkActivity(void);
	void __fastcall ScheduleUserEvent(Dbxcommon::_di_TDBXScheduleEvent event, int elapsedTime);
	void __fastcall ScheduleTerminationEvent(void);
	void __fastcall ScheduleInactiveTerminationEvent(void);
	void __fastcall CancelScheduledEvent(void);
	virtual bool __fastcall Authenticate(const Dscommonserver::TDSAuthenticateEventObject* AuthenticateEventObject, Dbxcommon::TDBXProperties* connectionProps)/* overload */;
	virtual bool __fastcall Authorize(Dscommonserver::TDSAuthorizeEventObject* EventObject)/* overload */;
	virtual bool __fastcall RequiresAuthorization(Dscommonserver::TDSMethodInfo* MethodInfo);
	virtual void __fastcall GetAuthRoles(Dscommonserver::TDSServerMethod* ServerMethod, /* out */ Classes::TStrings* &AuthorizedRoles, /* out */ Classes::TStrings* &DeniedRoles);
	virtual bool __fastcall IsValid(void);
	static System::UnicodeString __fastcall GenerateSessionId();
	virtual void __fastcall Close(void);
	virtual void __fastcall Terminate(void);
	bool __fastcall HasData(System::UnicodeString Key);
	System::UnicodeString __fastcall GetData(System::UnicodeString Key);
	void __fastcall PutData(System::UnicodeString Key, System::UnicodeString Value);
	void __fastcall RemoveData(System::UnicodeString Key);
	unsigned __fastcall ElapsedSinceLastActvity(void);
	unsigned __fastcall ExpiresIn(void);
	__property int LifeDuration = {read=FDuration, write=FDuration, nodefault};
	__property int Id = {read=GetId, nodefault};
	__property TDSSessionStatus Status = {read=GetSessionStatus, nodefault};
	__property System::TDateTime StartDateTime = {read=FStartDateTime};
	__property System::UnicodeString UserName = {read=FUserName};
	__property System::UnicodeString SessionName = {read=FSessionName};
	__property Classes::TStrings* UserRoles = {read=FUserRoles};
	__property TDSSessionCache* ParameterCache = {read=FCache};
	__property System::TObject* LastResultStream = {read=FLastResultStream, write=FLastResultStream};
	__property System::TObject* ObjectCreator = {read=FCreator, write=FCreator};
};


class DELPHICLASS TDSAuthSession;
class PASCALIMPLEMENTATION TDSAuthSession : public TDSSession
{
	typedef TDSSession inherited;
	
protected:
	Dsauth::TDSCustomAuthenticationManager* FAuthManager;
	
public:
	virtual void __fastcall GetAuthRoles(Dscommonserver::TDSServerMethod* ServerMethod, /* out */ Classes::TStrings* &AuthorizedRoles, /* out */ Classes::TStrings* &DeniedRoles);
	virtual bool __fastcall Authorize(Dscommonserver::TDSAuthorizeEventObject* EventObject)/* overload */;
	__property Dsauth::TDSCustomAuthenticationManager* AuthManager = {read=FAuthManager};
public:
	/* TDSSession.Create */ inline __fastcall virtual TDSAuthSession(void)/* overload */ : TDSSession() { }
	/* TDSSession.Destroy */ inline __fastcall virtual ~TDSAuthSession(void) { }
	
};


class DELPHICLASS TDSRESTSession;
class PASCALIMPLEMENTATION TDSRESTSession : public TDSAuthSession
{
	typedef TDSAuthSession inherited;
	
public:
	__fastcall virtual TDSRESTSession(Dsauth::TDSCustomAuthenticationManager* AAuthManager);
	virtual bool __fastcall Authenticate(const Dscommonserver::TDSAuthenticateEventObject* AuthenticateEventObject, Dbxcommon::TDBXProperties* connectionProps)/* overload */;
public:
	/* TDSSession.Destroy */ inline __fastcall virtual ~TDSRESTSession(void) { }
	
};


class DELPHICLASS TDSTunnelSession;
class PASCALIMPLEMENTATION TDSTunnelSession : public TDSAuthSession
{
	typedef TDSAuthSession inherited;
	
private:
	void *FUserPointer;
	int FUserFlag;
	
protected:
	virtual void __fastcall TerminateSession(void);
	
public:
	__fastcall TDSTunnelSession(void);
	__fastcall virtual ~TDSTunnelSession(void);
	virtual void __fastcall Open(void) = 0 ;
	virtual void __fastcall Reopen(Dbxdatasnap::TDBXDatasnapProperties* DBXDatasnapProperties);
	virtual int __fastcall Read(const System::DynamicArray<System::Byte> Buffer, const int Offset, const int Count) = 0 ;
	virtual int __fastcall Write(const System::DynamicArray<System::Byte> Buffer, const int Offset, const int Count) = 0 ;
	__property void * UserPointer = {read=FUserPointer, write=FUserPointer};
	__property int UserFlag = {read=FUserFlag, write=FUserFlag, nodefault};
};


class DELPHICLASS TDSRemoteSession;
class PASCALIMPLEMENTATION TDSRemoteSession : public TDSTunnelSession
{
	typedef TDSTunnelSession inherited;
	
private:
	Dbxsocketchannelnative::TDBXSocketChannel* FSocketChannel;
	
public:
	__fastcall TDSRemoteSession(Dbxdatasnap::TDBXDatasnapProperties* DBXDatasnapProperties);
	__fastcall virtual ~TDSRemoteSession(void);
	virtual void __fastcall Open(void);
	virtual void __fastcall Reopen(Dbxdatasnap::TDBXDatasnapProperties* DBXDatasnapProperties);
	virtual void __fastcall Close(void);
	virtual void __fastcall Terminate(void);
	virtual int __fastcall Read(const System::DynamicArray<System::Byte> Buffer, const int Offset, const int Count);
	virtual int __fastcall Write(const System::DynamicArray<System::Byte> Buffer, const int Offset, const int Count);
	virtual bool __fastcall Authenticate(const Dscommonserver::TDSAuthenticateEventObject* AuthenticateEventObject, Dbxcommon::TDBXProperties* connectionProps)/* overload */;
	__property Dbxsocketchannelnative::TDBXSocketChannel* SocketChannel = {read=FSocketChannel, write=FSocketChannel};
};


#pragma option push -b-
enum TDSSessionEventType { SessionCreate, SessionClose };
#pragma option pop

__interface TDSSessionEvent;
typedef System::DelphiInterface<TDSSessionEvent> _di_TDSSessionEvent;
__interface TDSSessionEvent  : public System::IInterface 
{
	
public:
	virtual void __fastcall Invoke(System::TObject* Sender, const TDSSessionEventType EventType, const TDSSession* Session) = 0 ;
};

__interface TDSSessionVisitor;
typedef System::DelphiInterface<TDSSessionVisitor> _di_TDSSessionVisitor;
__interface TDSSessionVisitor  : public System::IInterface 
{
	
public:
	virtual void __fastcall Invoke(const TDSSession* Session) = 0 ;
};

class DELPHICLASS TDSSessionManager;
class PASCALIMPLEMENTATION TDSSessionManager : public System::TObject
{
	typedef System::TObject inherited;
	
public:
	__interface TFactoryMethod;
	typedef System::DelphiInterface<TFactoryMethod> _di_TFactoryMethod;
	__interface TFactoryMethod  : public System::IInterface 
	{
		
public:
		virtual TDSSession* __fastcall Invoke(void) = 0 ;
	};
	
	
private:
	Generics_collections::TDictionary__2<System::UnicodeString,TDSSession*>* FSessionContainer;
	Generics_collections::TList__1<_di_TDSSessionEvent>* FListeners;
	
private:
	static TDSSessionManager* FInstance;
	TDSSession* __fastcall GetSession(System::UnicodeString SessionId);
	TDSTunnelSession* __fastcall GetTunnelSession(System::UnicodeString SessionId);
	System::UnicodeString __fastcall GetUniqueSessionId(void);
	void __fastcall TerminateSession(TDSSession* session)/* overload */;
	void __fastcall CloseSession(TDSSession* session)/* overload */;
	void __fastcall NotifyEvents(TDSSession* session, TDSSessionEventType EventType);
	void __fastcall TerminateAllSessions(const System::TObject* ACreator, bool AAllSessions)/* overload */;
	
public:
	__fastcall TDSSessionManager(void);
	__fastcall virtual ~TDSSessionManager(void);
	template<typename T> T __fastcall CreateSession(_di_TFactoryMethod factory, System::UnicodeString userName)/* overload */;
	template<typename T> T __fastcall CreateSession(_di_TFactoryMethod factory, bool DoNotify = true)/* overload */;
	void __fastcall AddSessionEvent(_di_TDSSessionEvent Event);
	bool __fastcall RemoveSessionEvent(_di_TDSSessionEvent Event);
	void __fastcall CloseSession(System::UnicodeString SessionId)/* overload */;
	void __fastcall TerminateAllSessions(const System::TObject* ACreator)/* overload */;
	void __fastcall TerminateAllSessions(void)/* overload */;
	void __fastcall ForEachSession(_di_TDSSessionVisitor AVisitor);
	void __fastcall TerminateSession(const System::UnicodeString sessionId)/* overload */;
	int __fastcall GetSessionCount(void);
	TDSSession* __fastcall RemoveSession(System::UnicodeString SessionId);
	void __fastcall GetOpenSessionKeys(Classes::TStrings* Container)/* overload */;
	void __fastcall GetOpenSessionKeys(Classes::TStrings* Container, System::TObject* ACreator)/* overload */;
	__classmethod TDSSession* __fastcall GetThreadSession();
	__classmethod void __fastcall SetAsThreadSession(TDSSession* Session);
	__classmethod void __fastcall ClearThreadSession();
	__property TDSSession* Session[System::UnicodeString id] = {read=GetSession};
	__property TDSTunnelSession* TunnelSession[System::UnicodeString id] = {read=GetTunnelSession};
	/* static */ __property TDSSessionManager* Instance = {read=FInstance};
};


class DELPHICLASS TDSSynchronizedLocalChannel;
class PASCALIMPLEMENTATION TDSSynchronizedLocalChannel : public Dbxtransport::TDBXLocalChannel
{
	typedef Dbxtransport::TDBXLocalChannel inherited;
	
private:
	Syncobjs::TSemaphore* FReadSemaphore;
	Syncobjs::TSemaphore* FLocalReadSemaphore;
	Syncobjs::TSemaphore* FWriteSemaphore;
	Syncobjs::TSemaphore* FLocalWriteSemaphore;
	bool FTerminated;
	
public:
	__fastcall TDSSynchronizedLocalChannel(const System::UnicodeString ServerName);
	__fastcall virtual ~TDSSynchronizedLocalChannel(void);
	virtual int __fastcall Read(const System::DynamicArray<System::Byte> Buffer, const int Offset, const int Count);
	virtual int __fastcall WriteLocalData(const System::DynamicArray<System::Byte> Buffer, const int Offset, const int Count);
	virtual int __fastcall Write(const System::DynamicArray<System::Byte> Buffer, const int Offset, const int Count);
	virtual int __fastcall ReadLocalData(const System::DynamicArray<System::Byte> Buffer, const int Offset, const int Count);
	void __fastcall Terminate(void);
};


class DELPHICLASS TDSLocalServer;
class PASCALIMPLEMENTATION TDSLocalServer : public Classes::TThread
{
	typedef Classes::TThread inherited;
	
private:
	System::UnicodeString FErrorMsg;
	Dbxtransport::TDBXLocalChannel* FLocalChannel;
	Dbxmessagehandlercommon::TDBXProtocolHandler* FDBXProtocolHandler;
	TDSSession* FSession;
	
protected:
	virtual void __fastcall Execute(void);
	void __fastcall ConsumeByteStream(void);
	
public:
	__fastcall TDSLocalServer(Dbxtransport::TDBXLocalChannel* ALocalChannel, Dstransport::TDSJSONProtocolHandlerFactory* AProtocolHandlerFactory, Dbxtransport::TTransportFilterCollection* AFilters, TDSSession* Session);
	__fastcall virtual ~TDSLocalServer(void);
	bool __fastcall HasError(void);
	__property System::UnicodeString ErrorMsg = {read=FErrorMsg};
};


class DELPHICLASS TDSLocalSession;
class PASCALIMPLEMENTATION TDSLocalSession : public TDSTunnelSession
{
	typedef TDSTunnelSession inherited;
	
private:
	Dbxtransport::TTransportFilterCollection* FFilters;
	Dstransport::TDSJSONProtocolHandlerFactory* FProtocolHandlerFactory;
	TDSSynchronizedLocalChannel* FLocalChannel;
	TDSLocalServer* FDSLocalServer;
	
public:
	__fastcall TDSLocalSession(Dbxtransport::TTransportFilterCollection* AFilters, Dstransport::TDSJSONProtocolHandlerFactory* AProtocolHandlerFactory);
	__fastcall virtual ~TDSLocalSession(void);
	virtual void __fastcall Open(void);
	virtual void __fastcall Close(void);
	virtual void __fastcall Terminate(void);
	virtual bool __fastcall Authenticate(const Dscommonserver::TDSAuthenticateEventObject* AuthenticateEventObject, Dbxcommon::TDBXProperties* connectionProps)/* overload */;
	virtual int __fastcall Read(const System::DynamicArray<System::Byte> Buffer, const int Offset, const int Count);
	virtual int __fastcall Write(const System::DynamicArray<System::Byte> Buffer, const int Offset, const int Count);
};


typedef System::DynamicArray<System::Byte> _dt_Dsservice_1;
typedef void __fastcall (__closure *TTunnelSessionEvent)(System::TObject* Sender, TDSTunnelSession* Session, _dt_Dsservice_1 Content, int &Count);

class DELPHICLASS TDSTunnelService;
class PASCALIMPLEMENTATION TDSTunnelService : public System::TObject
{
	typedef System::TObject inherited;
	
private:
	Dbxtransport::TTransportFilterCollection* FFilters;
	Dstransport::TDSJSONProtocolHandlerFactory* FProtocolHandlerFactory;
	System::UnicodeString FDSHostname;
	int FDSPort;
	bool FHasLocalServer;
	
private:
	Dbxdatasnap::TDBXDatasnapProperties* FDBXProperties;
	TTunnelSessionEvent FOnOpenSession;
	TTunnelSessionEvent FOnErrorOpenSession;
	TTunnelSessionEvent FOnCloseSession;
	TTunnelSessionEvent FOnWriteSession;
	TTunnelSessionEvent FOnReadSession;
	TTunnelSessionEvent FOnErrorWriteSession;
	TTunnelSessionEvent FOnErrorReadSession;
	Dsauth::TDSCustomAuthenticationManager* FDSAuthenticationManager;
	
protected:
	__classmethod bool __fastcall CanCloseSession(System::UnicodeString &id);
	void __fastcall CreateSession(/* out */ TDSTunnelSession* &Session, System::UnicodeString RemoteIP = L"");
	TDSTunnelSession* __fastcall GetSession(const System::UnicodeString SessionId);
	void __fastcall DefaultOpenSessionEvent(System::TObject* Sender, TDSTunnelSession* Session, System::DynamicArray<System::Byte> Content, int &Count);
	void __fastcall DefaultErrorOpenSessionEvent(System::TObject* Sender, TDSTunnelSession* Session, System::DynamicArray<System::Byte> Content, int &Count);
	void __fastcall DefaultCloseSessionEvent(System::TObject* Sender, TDSTunnelSession* Session, System::DynamicArray<System::Byte> Content, int &Count);
	void __fastcall DefaultWriteSessionEvent(System::TObject* Sender, TDSTunnelSession* Session, System::DynamicArray<System::Byte> Content, int &Count);
	void __fastcall DefaultReadSessionEvent(System::TObject* Sender, TDSTunnelSession* Session, System::DynamicArray<System::Byte> Content, int &Count);
	void __fastcall DefaultErrorWriteSessionEvent(System::TObject* Sender, TDSTunnelSession* Session, System::DynamicArray<System::Byte> Content, int &Count);
	void __fastcall DefaultErrorReadSessionEvent(System::TObject* Sender, TDSTunnelSession* Session, System::DynamicArray<System::Byte> Content, int &Count);
	void __fastcall SetDSHostname(System::UnicodeString AHostname);
	void __fastcall SetDSPort(int APort);
	
public:
	__fastcall virtual TDSTunnelService(System::UnicodeString DSHostname, int DSPort, Dbxtransport::TTransportFilterCollection* AFilters, Dstransport::TDSJSONProtocolHandlerFactory* AProtocolHandlerFactory);
	__fastcall virtual ~TDSTunnelService(void);
	void __fastcall AddUserCredentials(const System::UnicodeString userName, const System::UnicodeString userPass);
	void __fastcall TerminateAllSessions(void);
	__classmethod void __fastcall TerminateSession(const Classes::TStrings* Params)/* overload */;
	int __fastcall GetSessionCount(void);
	void __fastcall CloseSession(System::UnicodeString SessionId)/* overload */;
	void __fastcall GetOpenSessionKeys(Classes::TStrings* Container);
	TDSTunnelSession* __fastcall InitializeSession(Classes::TStrings* Params, System::UnicodeString RemoteIP = L"");
	void __fastcall ProcessPOST(Classes::TStrings* Params, System::DynamicArray<System::Byte> Content, /* out */ Dbxjson::TJSONValue* &JsonResponse, /* out */ bool &CloseConnection);
	Classes::TStream* __fastcall ProcessGET(Classes::TStrings* Params, int &Len, /* out */ bool &CloseConnection);
	bool __fastcall NeedsAuthentication(Classes::TStrings* Params);
	__property System::UnicodeString DSHostname = {read=FDSHostname, write=SetDSHostname};
	__property int DSPort = {read=FDSPort, write=SetDSPort, nodefault};
	__property bool HasLocalServer = {read=FHasLocalServer, write=FHasLocalServer, nodefault};
	__property Dbxtransport::TTransportFilterCollection* Filters = {read=FFilters, write=FFilters};
	__property Dstransport::TDSJSONProtocolHandlerFactory* ProtocolHandlerFactory = {read=FProtocolHandlerFactory, write=FProtocolHandlerFactory};
	__property TTunnelSessionEvent OnOpenSession = {read=FOnOpenSession, write=FOnOpenSession};
	__property TTunnelSessionEvent OnErrorOpenSession = {read=FOnErrorOpenSession, write=FOnErrorOpenSession};
	__property TTunnelSessionEvent OnCloseSession = {read=FOnCloseSession, write=FOnCloseSession};
	__property TTunnelSessionEvent OnWriteSession = {read=FOnWriteSession, write=FOnWriteSession};
	__property TTunnelSessionEvent OnReadSession = {read=FOnReadSession, write=FOnReadSession};
	__property TTunnelSessionEvent OnErrorWriteSession = {read=FOnErrorWriteSession, write=FOnErrorWriteSession};
	__property TTunnelSessionEvent OnErrorReadSession = {read=FOnErrorReadSession, write=FOnErrorReadSession};
	__property int SessionCount = {read=GetSessionCount, nodefault};
	__property Dsauth::TDSCustomAuthenticationManager* DSAuthenticationManager = {read=FDSAuthenticationManager, write=FDSAuthenticationManager};
};


class DELPHICLASS TDSTCPSession;
class PASCALIMPLEMENTATION TDSTCPSession : public TDSAuthSession
{
	typedef TDSAuthSession inherited;
	
public:
	__fastcall virtual TDSTCPSession(Dsauth::TDSCustomAuthenticationManager* AAuthManager)/* overload */;
	__fastcall virtual TDSTCPSession(System::TObject* AAuthManager)/* overload */;
	virtual bool __fastcall Authenticate(const Dscommonserver::TDSAuthenticateEventObject* AuthenticateEventObject, Dbxcommon::TDBXProperties* connectionProps)/* overload */;
public:
	/* TDSSession.Destroy */ inline __fastcall virtual ~TDSTCPSession(void) { }
	
};


//-- var, const, procedure ---------------------------------------------------
static const System::WideChar REQUEST_DELIMITER = (System::WideChar)(0x2f);
static const System::WideChar REQUEST_PARAM_DELIMITER = (System::WideChar)(0x3f);
#define REST_CONTEXT L"rest"
#define JSON_CONTEXT L"json"
#define CACHE_CONTEXT L"cache"

}	/* namespace Dsservice */
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE)
using namespace Dsservice;
#endif
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// DsserviceHPP
