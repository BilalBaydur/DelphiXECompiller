// CodeGear C++Builder
// Copyright (c) 1995, 2010 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'DBXOCL.pas' rev: 22.00

#ifndef DbxoclHPP
#define DbxoclHPP

#pragma delphiheader begin
#pragma option push
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member functions
#pragma pack(push,8)
#include <System.hpp>	// Pascal unit
#include <SysInit.hpp>	// Pascal unit
#include <SysUtils.hpp>	// Pascal unit
#include <Generics.Collections.hpp>	// Pascal unit
#include <Generics.Defaults.hpp>	// Pascal unit

//-- user supplied -----------------------------------------------------------

namespace Dbxocl
{
//-- type declarations -------------------------------------------------------
template<typename T1, typename T2> class DELPHICLASS TOCLTuple__2;
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T1, typename T2> class PASCALIMPLEMENTATION TOCLTuple__2 : public System::TObject
{
	typedef System::TObject inherited;
	
public:
	/* TObject.Create */ inline __fastcall TOCLTuple__2(void) : System::TObject() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TOCLTuple__2(void) { }
	
};


template<typename T> class DELPHICLASS TOCLIterator__1;
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TOCLIterator__1 : public System::TObject
{
	typedef System::TObject inherited;
	
protected:
	virtual T __fastcall GetValue(void) = 0 ;
	
public:
	virtual bool __fastcall Next(void) = 0 ;
	__property T Value = {read=GetValue};
public:
	/* TObject.Create */ inline __fastcall TOCLIterator__1(void) : System::TObject() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TOCLIterator__1(void) { }
	
};



#define _decl_Dbxocl_TSelectorFunction__1(T, _DECLNAME) bool __fastcall (__closure *_DECLNAME)(T v)
// typedef template<typename T> bool __fastcall (__closure *TSelectorFunction__1)(T v);


#define _decl_Dbxocl_TCollectorFunction__2(T, T2, _DECLNAME) T2 __fastcall (__closure *_DECLNAME)(T v)
// typedef template<typename T, typename T2> T2 __fastcall (__closure *TCollectorFunction__2)(T v);

template<typename T> class DELPHICLASS TOCLCollection__1;
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TOCLCollection__1 : public System::TObject
{
	typedef System::TObject inherited;
	
private:
	Generics_collections::TObjectList__1<System::TObject*>* FGC;
	
private:
	template<typename T2> bool __fastcall IsClassType(void);
	
protected:
	void __fastcall AddOwnedCollection(System::TObject* data);
	
public:
	__fastcall virtual TOCLCollection__1(void);
	__fastcall virtual ~TOCLCollection__1(void);
	void __fastcall GC(void);
	virtual int __fastcall Size(void) = 0 ;
	virtual int __fastcall Count(const T Object) = 0 ;
	virtual bool __fastcall Includes(const T Object) = 0 ;
	virtual bool __fastcall Excludes(const T Object);
	virtual bool __fastcall NotEmpty(void);
	virtual bool __fastcall IsEmpty(void);
	virtual TOCLBag__1<T>* __fastcall AsBag(bool Collected = true) = 0 ;
	virtual TOCLSequence__1<T>* __fastcall AsSequence(bool Collected = true) = 0 ;
	virtual TOCLSet__1<T>* __fastcall AsSet(bool Collected = true) = 0 ;
	virtual TOCLOrderedSet__1<T>* __fastcall AsOrderedSet(bool Collected = true) = 0 ;
	typedef bool __fastcall (__closure *_dt_Dbxocl_1)(T v);
	// typedef TSelectorFunction__1<T> _dt_Dbxocl_1;
	TOCLCollection__1<T>* __fastcall Select(_dt_Dbxocl_1 selector);
	typedef T2 __fastcall (__closure *_dt_Dbxocl_2)(T v);
	// typedef TCollectorFunction__2<T,T2> _dt_Dbxocl_2;
	template<typename T2> TOCLCollection__1<T2>* __fastcall Collect(_dt_Dbxocl_2 collector);
	virtual TOCLIterator__1<T>* __fastcall Iterator(void) = 0 ;
	__property bool Empty = {read=IsEmpty, nodefault};
};


template<typename T> class DELPHICLASS TOCLBag__1;
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TOCLBag__1 : public TOCLCollection__1<T>
{
	typedef TOCLCollection__1<T> inherited;
	
private:
	class DELPHICLASS TOCLBagIterator;
	// Template declaration generated by Delphi parameterized types is
	// used only for accessing Delphi variables and fields.
	// Don't instantiate with new type parameters in user code.
	class PASCALIMPLEMENTATION TOCLBagIterator : public TOCLIterator__1<T>
	{
		typedef TOCLIterator__1<T> inherited;
		
private:
		int FIndex;
		Generics_collections::TList__1<T>* FBag;
		
protected:
		virtual T __fastcall GetValue(void);
		
public:
		__fastcall TOCLBagIterator(TOCLBag__1<T>* bag);
		virtual bool __fastcall Next(void);
public:
		/* TObject.Destroy */ inline __fastcall virtual ~TOCLBagIterator(void) { }
		
	};
	
	
	
private:
	Generics_collections::TList__1<T>* FBag;
	System::DelphiInterface<Generics_defaults::IComparer__1<T> >  FComparer;
	// System::DelphiInterface<Generics_defaults::IComparer__1<T> >  FComparer;
	bool FOwner;
	
public:
	__fastcall virtual TOCLBag__1(void)/* overload */;
	__fastcall TOCLBag__1(Generics_collections::TList__1<T>* data, bool AOwner)/* overload */;
	__fastcall virtual ~TOCLBag__1(void);
	virtual int __fastcall Size(void);
	virtual bool __fastcall Includes(const T Object);
	virtual TOCLIterator__1<T>* __fastcall Iterator(void);
	virtual TOCLBag__1<T>* __fastcall AsBag(bool Collected = true);
	virtual TOCLSequence__1<T>* __fastcall AsSequence(bool Collected = true);
	virtual TOCLSet__1<T>* __fastcall AsSet(bool Collected = true);
	virtual TOCLOrderedSet__1<T>* __fastcall AsOrderedSet(bool Collected = true);
	virtual bool __fastcall Eq(const TOCLBag__1<T>* Bag);
	virtual TOCLBag__1<T>* __fastcall Union(const TOCLBag__1<T>* Bag)/* overload */;
	virtual TOCLBag__1<T>* __fastcall Union(const TOCLSet__1<T>* Set)/* overload */;
	virtual TOCLBag__1<T>* __fastcall Including(const T Object);
	virtual TOCLBag__1<T>* __fastcall Excluding(const T Object);
	virtual int __fastcall Count(const T Object);
	template<typename T2> TOCLBag__1<T2>* __fastcall Flatten(void);
	template<typename T2> TOCLSet__1<TOCLTuple__2<T,T2>*>* __fastcall Product(const TOCLCollection__1<T2>* C2);
};


template<typename T> class DELPHICLASS TOCLSequence__1;
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TOCLSequence__1 : public TOCLCollection__1<T>
{
	typedef TOCLCollection__1<T> inherited;
	
public:
	virtual TOCLSequence__1<T>* __fastcall AsSequence(bool Collected = true);
	virtual int __fastcall Count(const T Object) = 0 ;
	virtual bool __fastcall Eq(const TOCLSequence__1<T>* Obj) = 0 ;
	virtual TOCLSequence__1<T>* __fastcall Union(const TOCLSequence__1<T>* S) = 0 ;
	template<typename T2> TOCLSequence__1<T2>* __fastcall Flatten(void);
	virtual TOCLSequence__1<T>* __fastcall Append(const T Object) = 0 ;
	virtual TOCLSequence__1<T>* __fastcall Prepend(const T Object) = 0 ;
	virtual TOCLSequence__1<T>* __fastcall InsertAt(const int Index, const T Object) = 0 ;
	virtual TOCLSequence__1<T>* __fastcall SubSequence(const int Lower, const int Upper) = 0 ;
	virtual T __fastcall At(const int I) = 0 ;
	virtual int __fastcall IndexOf(const T Obj) = 0 ;
	virtual T __fastcall First(void) = 0 ;
	virtual T __fastcall Last(void) = 0 ;
	virtual TOCLSequence__1<T>* __fastcall Including(const T Object) = 0 ;
	virtual TOCLSequence__1<T>* __fastcall Excluding(const T Object) = 0 ;
	template<typename T2> TOCLSet__1<TOCLTuple__2<T,T2>*>* __fastcall Product(const TOCLCollection__1<T2>* C2);
public:
	/* {DBXOCL}TOCLCollection<DBXOCL_TOCLSequence<T>_T>.Create */ inline __fastcall virtual TOCLSequence__1(void) : TOCLCollection__1<T>() { }
	/* {DBXOCL}TOCLCollection<DBXOCL_TOCLSequence<T>_T>.Destroy */ inline __fastcall virtual ~TOCLSequence__1(void) { }
	
};


template<typename T> class DELPHICLASS TOCLSet__1;
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TOCLSet__1 : public TOCLCollection__1<T>
{
	typedef TOCLCollection__1<T> inherited;
	
public:
	virtual TOCLSet__1<T>* __fastcall AsSet(bool Collected = true);
	virtual TOCLSet__1<T>* __fastcall Union(const TOCLSet__1<T>* S) = 0 /* overload */;
	virtual TOCLBag__1<T>* __fastcall Union(const TOCLBag__1<T>* Bag) = 0 /* overload */;
	virtual bool __fastcall Eq(const TOCLSet__1<T>* Obj) = 0 ;
	virtual TOCLSet__1<T>* __fastcall Intersection(const TOCLSet__1<T>* S) = 0 /* overload */;
	virtual TOCLSet__1<T>* __fastcall Intersection(const TOCLBag__1<T>* S)/* overload */;
	virtual TOCLSet__1<T>* __fastcall Diff(const TOCLSet__1<T>* S) = 0 ;
	virtual TOCLSet__1<T>* __fastcall Including(const T Object) = 0 ;
	virtual TOCLSet__1<T>* __fastcall Excluding(const T Object) = 0 ;
	virtual TOCLSet__1<T>* __fastcall SymmetricDifference(const TOCLSet__1<T>* S) = 0 ;
	template<typename T2> TOCLSet__1<TOCLTuple__2<T,T2>*>* __fastcall Product(const TOCLCollection__1<T2>* C2);
	virtual int __fastcall Count(const T Object) = 0 ;
	template<typename T2> TOCLSet__1<T2>* __fastcall Flatten(void);
public:
	/* {DBXOCL}TOCLCollection<DBXOCL_TOCLSet<T>_T>.Create */ inline __fastcall virtual TOCLSet__1(void) : TOCLCollection__1<T>() { }
	/* {DBXOCL}TOCLCollection<DBXOCL_TOCLSet<T>_T>.Destroy */ inline __fastcall virtual ~TOCLSet__1(void) { }
	
};


template<typename T> class DELPHICLASS TOCLOrderedSet__1;
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TOCLOrderedSet__1 : public TOCLSet__1<T>
{
	typedef TOCLSet__1<T> inherited;
	
public:
	virtual TOCLOrderedSet__1<T>* __fastcall AsOrderedSet(bool Collected = true);
	virtual TOCLOrderedSet__1<T>* __fastcall Append(const T Object) = 0 ;
	virtual TOCLOrderedSet__1<T>* __fastcall Prepend(const T Object) = 0 ;
	virtual TOCLOrderedSet__1<T>* __fastcall InsertAt(const int Index, const T Object) = 0 ;
	virtual TOCLOrderedSet__1<T>* __fastcall SubOrderedSet(const int Lower, const int Upper) = 0 ;
	virtual T __fastcall At(const int I) = 0 ;
	virtual int __fastcall IndexOf(const T Obj) = 0 ;
	virtual T __fastcall First(void);
	virtual T __fastcall Last(void);
public:
	/* {DBXOCL}TOCLCollection<DBXOCL_TOCLOrderedSet<T>_T>.Create */ inline __fastcall virtual TOCLOrderedSet__1(void) : TOCLSet__1<T>() { }
	/* {DBXOCL}TOCLCollection<DBXOCL_TOCLOrderedSet<T>_T>.Destroy */ inline __fastcall virtual ~TOCLOrderedSet__1(void) { }
	
};


//-- var, const, procedure ---------------------------------------------------

}	/* namespace Dbxocl */
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE)
using namespace Dbxocl;
#endif
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// DbxoclHPP
